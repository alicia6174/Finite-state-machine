!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC       = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS   = -g -Wall$/;"	m
CXX	Makefile	/^CXX      = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = $(CFLAGS) -Weffc++$/;"	m
CXX_OBJS	Makefile	/^CXX_OBJS    = $(patsubst %.cpp,%.o,$(wildcard $(CXX_SOURCES)))$/;"	m
CXX_SOURCES	Makefile	/^CXX_SOURCES = $(shell find . -name "*.cpp")$/;"	m
C_OBJS	Makefile	/^C_OBJS      = $(patsubst %.c,%.o,$(wildcard $(C_SOURCES)))$/;"	m
C_SOURCES	Makefile	/^C_SOURCES   = $(shell find . -name "*.c")$/;"	m
DIR	Makefile	/^DIR     = $(shell pwd)$/;"	m
EXEC	Makefile	/^EXEC      = $(shell basename "$(DIR)")$/;"	m
Frame	main.cpp	/^    Frame(int n = 0, int k = 0, int s = 0):$/;"	f	struct:Frame	access:public	signature:(int n = 0, int k = 0, int s = 0)
Frame	main.cpp	/^struct Frame$/;"	s	file:
Frame::Frame	main.cpp	/^    Frame(int n = 0, int k = 0, int s = 0):$/;"	f	struct:Frame	access:public	signature:(int n = 0, int k = 0, int s = 0)
Frame::arg_m	main.cpp	/^    int arg_m;$/;"	m	struct:Frame	file:	access:public
Frame::arg_n	main.cpp	/^    int arg_n;$/;"	m	struct:Frame	file:	access:public
Frame::local_tmp	main.cpp	/^    int local_tmp;$/;"	m	struct:Frame	file:	access:public
Frame::ret	main.cpp	/^    int ret;$/;"	m	struct:Frame	file:	access:public
Frame::st	main.cpp	/^    int st;$/;"	m	struct:Frame	file:	access:public
INCPATH	Makefile	/^INCPATH  =$/;"	m
LIBS	Makefile	/^LIBS     = -lm$/;"	m
OBJS	Makefile	/^OBJS        = $(C_OBJS) $(CXX_OBJS)$/;"	m
ST_RETURE	main.cpp	/^    ST_RETURE = 64$/;"	e	enum:__anon1	file:
Stack	main.cpp	/^    Stack(void):$/;"	f	class:Stack	access:public	signature:(void)
Stack	main.cpp	/^class Stack$/;"	c	file:
Stack::Stack	main.cpp	/^    Stack(void):$/;"	f	class:Stack	access:public	signature:(void)
Stack::empty	main.cpp	/^    bool empty(void) const$/;"	f	class:Stack	access:public	signature:(void) const
Stack::m_buf	main.cpp	/^    T m_buf[1024];$/;"	m	class:Stack	file:	access:private
Stack::m_sp	main.cpp	/^    int m_sp;$/;"	m	class:Stack	file:	access:private
Stack::pop	main.cpp	/^    T pop(void)$/;"	f	class:Stack	access:public	signature:(void)
Stack::push	main.cpp	/^    void push(const T & t)$/;"	f	class:Stack	access:public	signature:(const T & t)
Stack::size	main.cpp	/^    int size(void)$/;"	f	class:Stack	access:public	signature:(void)
Stack::top	main.cpp	/^    T * top(void)$/;"	f	class:Stack	access:public	signature:(void)
ack	main.cpp	/^int ack(int m, int n)$/;"	f	signature:(int m, int n)
arg_m	main.cpp	/^    int arg_m;$/;"	m	struct:Frame	file:	access:public
arg_n	main.cpp	/^    int arg_n;$/;"	m	struct:Frame	file:	access:public
empty	main.cpp	/^    bool empty(void) const$/;"	f	class:Stack	access:public	signature:(void) const
local_tmp	main.cpp	/^    int local_tmp;$/;"	m	struct:Frame	file:	access:public
m_buf	main.cpp	/^    T m_buf[1024];$/;"	m	class:Stack	file:	access:private
m_sp	main.cpp	/^    int m_sp;$/;"	m	class:Stack	file:	access:private
main	main.cpp	/^int main(int argc, const char * argv[])$/;"	f	signature:(int argc, const char * argv[])
pop	main.cpp	/^    T pop(void)$/;"	f	class:Stack	access:public	signature:(void)
push	main.cpp	/^    void push(const T & t)$/;"	f	class:Stack	access:public	signature:(const T & t)
ret	main.cpp	/^    int ret;$/;"	m	struct:Frame	file:	access:public
size	main.cpp	/^    int size(void)$/;"	f	class:Stack	access:public	signature:(void)
st	main.cpp	/^    int st;$/;"	m	struct:Frame	file:	access:public
top	main.cpp	/^    T * top(void)$/;"	f	class:Stack	access:public	signature:(void)
